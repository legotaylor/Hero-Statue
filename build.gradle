//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
	id "maven-publish"
	alias libs.plugins.loom
	alias libs.plugins.minotaur
}

version = "$modVersion+$branchName"
base.archivesName = project.slug

repositories {
	maven { url 'https://maven.terraformersmc.com/releases/' }
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
	maven { url 'https://repo.sleeping.town/' }
}

dependencies {
	minecraft libs.mc
	mappings variantOf(libs.yarn) { classifier "v2" }

	modImplementation libs.fl
	modImplementation libs.fapi
	modImplementation libs.modmenu
	modImplementation libs.sodium
	modImplementation libs.kaleido
	include libs.kaleido
	modCompileOnly libs.iris
}

processResources {
	final Map<String, String> meta = [
		version       : version,
		modId         : modId,
		modName       : modName,
		modDescription: modDescription,
		homepage      : "https://modrinth.com/mod/${slug}",
		issues        : "https://github.com/${user}/${slug}/issues",
		sources       : "https://github.com/${user}/${slug}",
		license       : license,
		authors       : authors.split(", ").join("\",\n    \""),
		contributors  : contributors.split(", ").join("\",\n    \""),
		members       : "${authors}${contributors ? ". Contributions by ${contributors}." : ""}",
		mc            : compatibleVersions.split(", ")[0],
		fl            : libs.versions.fl.get(),
		fapi          : libs.versions.fapi.get(),
	]
	inputs.properties meta
	filesMatching("*.mod.json") { expand(meta) }
	filesMatching("META-INF/*mods.toml") { expand(meta) }
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}


publishing {
	repositories {
	}
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}

modrinth {
	token = "$System.env.MODRINTH_TOKEN"
	projectId = slug
	versionNumber = project.version
	uploadFile = remapJar
	gameVersions = compatibleVersions.split(", ").toList()
	loaders = compatibleLoaders.split(", ").toList()
	changelog = "$System.env.CHANGELOG"
	syncBodyFrom = "<!--DO NOT EDIT MANUALLY: synced from gh readme-->\n" + rootProject.file("README.md").text
	dependencies {
		required.version "fabric-api", libs.versions.fapi.get()
		optional.version "iris", libs.versions.iris.get()
		optional.version "modmenu", libs.versions.modmenu.get()
	}
}

tasks.register('runQuickPlaySingleplayer') {
	group = 'fabric'
	description = 'Executes runClient and loads into the Singleplayer Test World.'
	doFirst {
		project.extensions.extraProperties.set("runQuickPlaySingleplayer", true)
	}
	dependsOn('runClient')
}

tasks.register('runQuickPlayMultiplayer') {
	group = 'fabric'
	description = 'Executes runClient and loads into the Multiplayer Test World.'
	doFirst {
		project.extensions.extraProperties.set("runQuickPlayMultiplayer", true)
	}
	dependsOn('runClient')
}

tasks.named('runClient') {
	doFirst {
		if (project.hasProperty("runQuickPlaySingleplayer")) {
			args = ['--quickPlaySingleplayer', project.findProperty("quickPlaySingleplayer") ?: "Test World"]
		} else if (project.hasProperty("runQuickPlayMultiplayer")) {
			args = ['--quickPlayMultiplayer', project.findProperty("quickPlayMultiplayer") ?: "localhost"]
		}
	}
}
